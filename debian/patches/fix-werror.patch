Description: fix errors with gcc-4.6
   fix errors caused by new warnings in gcc-4.6 combined with -Werror
Bug-Debian: http://bugs.debian.org/625404

--- pidgin-sipe-1.11.2.orig/src/core/sipe-digest.c
+++ pidgin-sipe-1.11.2/src/core/sipe-digest.c
@@ -41,13 +41,12 @@ static void sipe_digest(const SECOidTag
 			guchar *digest, gsize digest_length)
 {
 	PK11Context *context = 0;
-	SECStatus s;
 	unsigned int len;
 	
 	context = PK11_CreateDigestContext(algorithm);
-	s = PK11_DigestBegin(context);
-	s = PK11_DigestOp(context, data, data_length);
-	s = PK11_DigestFinal(context, digest, &len, digest_length);
+	PK11_DigestBegin(context);
+	PK11_DigestOp(context, data, data_length);
+	PK11_DigestFinal(context, digest, &len, digest_length);
 	PK11_DestroyContext(context, PR_TRUE);
 }
 
@@ -59,7 +58,6 @@ sipe_digest_hmac_ctx_create(CK_MECHANISM
 	SECItem noParams;
 	PK11SymKey* SymKey;
 	PK11Context* DigestContext;
-	SECStatus s;
 
 	/* For key */
 	slot = PK11_GetBestSlot(hmacMech, NULL);
@@ -77,7 +75,7 @@ sipe_digest_hmac_ctx_create(CK_MECHANISM
 
 	DigestContext = PK11_CreateContextBySymKey(hmacMech, CKA_SIGN, SymKey, &noParams);
 	
-	s = PK11_DigestBegin(DigestContext);
+	PK11_DigestBegin(DigestContext);
 	
 	PK11_FreeSymKey(SymKey);
 	PK11_FreeSlot(slot);
--- pidgin-sipe-1.11.2.orig/src/core/sip-sec-ntlm-tests.c
+++ pidgin-sipe-1.11.2/src/core/sip-sec-ntlm-tests.c
@@ -124,7 +124,6 @@ gboolean sip_sec_ntlm_tests(void)
 	struct sipmsg *msg;
 	struct sipmsg_breakdown msgbd;
 	gchar *msg_str;
-	gchar *sig;
 	const char *password2;
 	const char *user2;
 	const char *domain2;
@@ -508,7 +507,7 @@ Response:
 		msg_str, 0, exported_session_key2, exported_session_key2, mac);
 	sipmsg_breakdown_free(&msgbd);
 	assert_equal ("0100000000000000BF2E52667DDF6DED", mac, 16, TRUE);
-	sig = buff_to_hex_str(mac, 16);
+	buff_to_hex_str(mac, 16);
 	}
 
 
@@ -762,7 +761,7 @@ Message (length 352):
 	sip_sec_ntlm_sipe_signature_make (flags, msg_str, 0, client_sign_key, client_seal_key, mac);
 	sipmsg_breakdown_free(&msgbd);
 	assert_equal ("0100000029618e9651b65a7764000000", mac, 16, TRUE);
-	sig = buff_to_hex_str(mac, 16);
+	buff_to_hex_str(mac, 16);
 
 	printf ("\n\nTesting (NTLMv2 / OC 2007 R2) Message Parsing, Signing, and Verification\nServer response\n(Authentication Protocol version 4)\n");
 	msg = sipmsg_parse_msg(response);
@@ -774,7 +773,7 @@ Message (length 352):
 	sip_sec_ntlm_sipe_signature_make (flags, msg_str, 0, server_sign_key, server_seal_key, mac);
 	sipmsg_breakdown_free(&msgbd);
 	assert_equal ("01000000E615438A917661BE64000000", mac, 16, TRUE);
-	sig = buff_to_hex_str(mac, 16);
+	buff_to_hex_str(mac, 16);
 
 	printf ("\n\nTesting (NTLMv2 / OC 2007 R2) MAC - client signing\n");
 	MAC (flags,   (gchar*)request_sig,strlen(request_sig),   client_sign_key,16,   client_seal_key,16,   0,  100, mac);
--- pidgin-sipe-1.11.2.orig/src/core/sipe.c
+++ pidgin-sipe-1.11.2/src/core/sipe.c
@@ -1526,16 +1526,12 @@ static void sipe_process_registration_no
 	if (diagnostics != NULL) {
 		reason = sipmsg_find_part_of_header(diagnostics, "reason=\"", "\"", NULL);
 	} else { // for LCS2005
-		int error_id = 0;
 		if (event && sipe_strcase_equal(event, "unregistered")) {
-			error_id = 4140; // [MS-SIPREGE]
 			//reason = g_strdup(_("User logged out")); // [MS-OCER]
 			reason = g_strdup(_("you are already signed in at another location"));
 		} else if (event && sipe_strcase_equal(event, "rejected")) {
-			error_id = 4141;
 			reason = g_strdup(_("user disabled")); // [MS-OCER]
 		} else if (event && sipe_strcase_equal(event, "deactivated")) {
-			error_id = 4142;
 			reason = g_strdup(_("user moved")); // [MS-OCER]
 		}
 	}
@@ -4304,7 +4300,6 @@ static void process_incoming_notify_msrt
 	const sipe_xml *xn_state;
 	const sipe_xml *xn_contact;
 	char *note;
-	char *free_activity;
 	int user_avail;
 	const char *user_avail_nil;
 	int res_avail;
@@ -4341,7 +4336,6 @@ static void process_incoming_notify_msrt
 		user_avail_since = 0;
 	}
 
-	free_activity = NULL;
 
 	name = sipe_xml_attribute(xn_presentity, "uri"); /* without 'sip:' prefix */
 	uri = sip_uri_from_name(name);
@@ -5492,8 +5486,6 @@ sipe_publish_get_category_cal_free_busy(
 	guint cal_data_instance = sipe_get_pub_instance(sipe_private, SIPE_PUB_CALENDAR_DATA);
 	char *fb_start_str;
 	char *free_busy_base64;
-	const char *st;
-	const char *fb;
 	char *res;
 
 	/* key is <category><instance><container> */
@@ -5532,9 +5524,6 @@ sipe_publish_get_category_cal_free_busy(
 	fb_start_str = sipe_utils_time_to_str(cal->fb_start);
 	free_busy_base64 = sipe_cal_get_freebusy_base64(cal->free_busy);
 
-	st = publication_cal_300 ? publication_cal_300->fb_start_str : NULL;
-	fb = publication_cal_300 ? publication_cal_300->free_busy_base64 : NULL;
-
 	/* we will rebuplish the same data to refresh publication time,
 	 * so if data from multiple sources, most recent will be choosen
 	 */
--- pidgin-sipe-1.11.2.orig/src/core/sip-sec-krb5.c
+++ pidgin-sipe-1.11.2/src/core/sip-sec-krb5.c
@@ -281,13 +281,12 @@ sip_sec_krb5_print_gss_error0(char *func
 			     OM_uint32 status,
 			     int type)
 {
-	OM_uint32 ret;
 	OM_uint32 minor;
 	OM_uint32 message_context = 0;
 	gss_buffer_desc status_string;
 
 	do {
-		ret = gss_display_status(&minor,
+		gss_display_status(&minor,
 					 status,
 					 type,
 					 GSS_C_NO_OID,
--- pidgin-sipe-1.11.2.orig/src/core/sipe-incoming.c
+++ pidgin-sipe-1.11.2/src/core/sipe-incoming.c
@@ -255,7 +255,6 @@ void process_incoming_invite(struct sipe
 	const gchar *oldHeader;
 	gchar *newHeader;
 	gboolean is_multiparty = FALSE;
-	gboolean is_triggered = FALSE;
 	gboolean was_multiparty = TRUE;
 	gboolean just_joined = FALSE;
 	gchar *from;
@@ -311,7 +310,6 @@ void process_incoming_invite(struct sipe
 		}
 	}
 	if (trig_invite && !g_strcasecmp(trig_invite, "TRUE")) {
-		is_triggered = TRUE;
 		is_multiparty = TRUE;
 	}
 
